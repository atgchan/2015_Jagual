/* HW#1.P1 : Counting Internal node */

int countingInternalNode(Node *node){
     if(node == nullptr)
          return 0;

     return 1 + countingInteralNode(node->leftChild) + countingInternalNode(node->rightChild);
}



/* HW#1.P2 : Insertion Sort 손코딩 */

void InsertionSort(int *arr, int size)
{
     int idx, subIdx, key;

     for( idx = 0; idx < length; idx++ ){
          key = arr[i];
          subIdx = idx - 1;
          while( subIdx >= 0 && arr[subIdx] > key ){
               arr[subIdx + 1] = arr[subIdx];
               subIdx--;
          }
          arr[subIdx + 1] = key;
     }
}


/* HW#1.P3 : Insertion Sort Test Case 작성 */

원소 개수 관점 : 원소의 개수를 많~이 줘본다.
예) 2,5,57,3,5,7,4,1,3,5,8,3,3,6,2,7,8,4,2,17,6,3,6,2 ... 1000개 이상

입력 특성 관점 : 연속되는 숫자, 모두 같은 숫자, 순서가 정 반대, 이미 정렬 되어있는 상태
예) 1,1,1,1,2,2,2,2,6,6,6,4,4,4,4
예) 4,4,4,4,4,4,4,4,4,4,4,4
예) 7,6,5,4,3,2,1
예) 1,2,3,4,5,6,7



/* HW#1.P4 : 알고리듬 교재 2.1-3 */

// linear search 손코딩:

int searchIdxOfCertainValue(int arr[], int value, int arrlen) {
     int i = 0;

     if (!arr) return -1;

     for( i = 0; i < arrlen; i++ ){
          if( arr[i] == value ) {
               break;
          }
     }
     return i;
}

// Loop invarient를 사용한 증명:

진입 시, [0, i-1]에는 value와 일치하는 값이 없다.
반복 전, [0, i]에는 value와 일치하는 값이 없다.
종료 후, i < arrlen 이라면 arr[i]는 value와 일치한다.
종료 후, i == arrlen 이라면 arr에는 value와 일치하는 값이 없다.

// Test Case 작성:

arr[16] = [1,4,6,3,9,3,1,5,3,5,8,5,9,3,0,3];
int idx = searchIdxOfCertainValue(arr[], 3, 16);